Index.PACKAGES = {"algo.data.dsu.mutable" : [{"name" : "algo.data.dsu.mutable.DisjointSetUnion", "object" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html", "members_object" : [{"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.mutable.DisjointSetUnion.from", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:cats.kernel.CommutativeSemigroup[V]):algo.data.dsu.mutable.DisjointSetUnion[V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.tabulate", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$7:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.fill", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$6:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.concat", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#concat[V](xss:Iterable[V]*)(implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.unfold", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.iterate", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.apply", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#apply[V](xs:V*)(implicitevidence$2:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unite", "tail" : "(u: Int, v: Int): DisjointSetUnion.this.type", "member" : "algo.data.dsu.mutable.DisjointSetUnion.unite", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#unite(u:Int,v:Int):DisjointSetUnion.this.type", "kind" : "abstract def"}, {"label" : "isSame", "tail" : "(u: Int, v: Int): Boolean", "member" : "algo.data.dsu.mutable.DisjointSetUnion.isSame", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#isSame(u:Int,v:Int):Boolean", "kind" : "abstract def"}, {"label" : "find", "tail" : "(v: Int): V", "member" : "algo.data.dsu.mutable.DisjointSetUnion.find", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#find(v:Int):V", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(v: Int): V", "member" : "algo.data.dsu.mutable.DisjointSetUnion.apply", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#apply(v:Int):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "algo.data.dsu.mutable.DisjointSetUnion.size", "link" : "algo\/data\/dsu\/mutable\/DisjointSetUnion.html#size:Int", "kind" : "abstract def"}], "shortDescription" : ""}], "algo.data.stack.mutable" : [{"name" : "algo.data.stack.mutable.MinMaxStack", "object" : "algo\/data\/stack\/mutable\/MinMaxStack$.html", "members_object" : [{"label" : "toFactory", "tail" : "(self: MinMaxStack.this.type)(arg0: Ordering[A]): Factory[A, MinMaxStack[A]]", "member" : "algo.data.stack.mutable.MinMaxStack.toFactory", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#toFactory[A](self:algo.data.stack.mutable.MinMaxStack.type)(implicitevidence$5:Ordering[A]):scala.collection.Factory[A,algo.data.stack.mutable.MinMaxStack[A]]", "kind" : "implicit def"}, {"label" : "newBuilder", "tail" : "(arg0: Ordering[A]): Builder[A, MinMaxStack[A]]", "member" : "algo.data.stack.mutable.MinMaxStack.newBuilder", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#newBuilder[A](implicitevidence$4:Ordering[A]):scala.collection.mutable.Builder[A,algo.data.stack.mutable.MinMaxStack[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*)(arg0: Ordering[A]): MinMaxStack[A]", "member" : "algo.data.stack.mutable.MinMaxStack.apply", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#apply[A](elems:A*)(implicitevidence$3:Ordering[A]):algo.data.stack.mutable.MinMaxStack[A]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[A])(arg0: Ordering[A]): MinMaxStack[A]", "member" : "algo.data.stack.mutable.MinMaxStack.from", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#from[A](iterable:IterableOnce[A])(implicitevidence$2:Ordering[A]):algo.data.stack.mutable.MinMaxStack[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(arg0: Ordering[A]): MinMaxStack[A]", "member" : "algo.data.stack.mutable.MinMaxStack.empty", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#empty[A](implicitevidence$1:Ordering[A]):algo.data.stack.mutable.MinMaxStack[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/stack\/mutable\/MinMaxStack$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/stack\/mutable\/MinMaxStack.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C]): C", "member" : "algo.data.stack.mutable.MinMaxStack.to", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#to[C](factory:scala.collection.Factory[A,C]):C", "kind" : "abstract def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[A]", "member" : "algo.data.stack.mutable.MinMaxStack.reverseIterator", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#reverseIterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "algo.data.stack.mutable.MinMaxStack.iterator", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#iterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "algo.data.stack.mutable.MinMaxStack.nonEmpty", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#nonEmpty:Boolean", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "algo.data.stack.mutable.MinMaxStack.isEmpty", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "minmaxOption", "tail" : "(): Option[(A, A)]", "member" : "algo.data.stack.mutable.MinMaxStack.minmaxOption", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#minmaxOption:Option[(A,A)]", "kind" : "abstract def"}, {"label" : "minmax", "tail" : "(): (A, A)", "member" : "algo.data.stack.mutable.MinMaxStack.minmax", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#minmax:(A,A)", "kind" : "abstract def"}, {"label" : "maxOption", "tail" : "(): Option[A]", "member" : "algo.data.stack.mutable.MinMaxStack.maxOption", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#maxOption:Option[A]", "kind" : "abstract def"}, {"label" : "max", "tail" : "(): A", "member" : "algo.data.stack.mutable.MinMaxStack.max", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#max:A", "kind" : "abstract def"}, {"label" : "minOption", "tail" : "(): Option[A]", "member" : "algo.data.stack.mutable.MinMaxStack.minOption", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#minOption:Option[A]", "kind" : "abstract def"}, {"label" : "min", "tail" : "(): A", "member" : "algo.data.stack.mutable.MinMaxStack.min", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#min:A", "kind" : "abstract def"}, {"label" : "ordering", "tail" : "(): Ordering[A]", "member" : "algo.data.stack.mutable.MinMaxStack.ordering", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#ordering:Ordering[A]", "kind" : "abstract def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "algo.data.stack.mutable.MinMaxStack.clear", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#clear():Unit", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: Int): A", "member" : "algo.data.stack.mutable.MinMaxStack.apply", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#apply(index:Int):A", "kind" : "abstract def"}, {"label" : "bottomOption", "tail" : "(): Option[A]", "member" : "algo.data.stack.mutable.MinMaxStack.bottomOption", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#bottomOption:Option[A]", "kind" : "abstract def"}, {"label" : "bottom", "tail" : "(): A", "member" : "algo.data.stack.mutable.MinMaxStack.bottom", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#bottom:A", "kind" : "abstract def"}, {"label" : "topOption", "tail" : "(): Option[A]", "member" : "algo.data.stack.mutable.MinMaxStack.topOption", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#topOption:Option[A]", "kind" : "abstract def"}, {"label" : "top", "tail" : "(): A", "member" : "algo.data.stack.mutable.MinMaxStack.top", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#top:A", "kind" : "abstract def"}, {"label" : "popWhile", "tail" : "(f: (A) => Boolean): Seq[A]", "member" : "algo.data.stack.mutable.MinMaxStack.popWhile", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#popWhile(f:A=>Boolean):Seq[A]", "kind" : "abstract def"}, {"label" : "popAll", "tail" : "(): Seq[A]", "member" : "algo.data.stack.mutable.MinMaxStack.popAll", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#popAll():Seq[A]", "kind" : "abstract def"}, {"label" : "pop", "tail" : "(): A", "member" : "algo.data.stack.mutable.MinMaxStack.pop", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#pop():A", "kind" : "abstract def"}, {"label" : "pushAll", "tail" : "(iterable: IterableOnce[A]): MinMaxStack.this.type", "member" : "algo.data.stack.mutable.MinMaxStack.pushAll", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#pushAll(iterable:IterableOnce[A]):MinMaxStack.this.type", "kind" : "abstract def"}, {"label" : "push", "tail" : "(value: A, values: A*): MinMaxStack.this.type", "member" : "algo.data.stack.mutable.MinMaxStack.push", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#push(value:A,values:A*):MinMaxStack.this.type", "kind" : "abstract def"}, {"label" : "push", "tail" : "(value: A): MinMaxStack.this.type", "member" : "algo.data.stack.mutable.MinMaxStack.push", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#push(value:A):MinMaxStack.this.type", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "algo.data.stack.mutable.MinMaxStack.size", "link" : "algo\/data\/stack\/mutable\/MinMaxStack.html#size:Int", "kind" : "abstract def"}], "shortDescription" : "A data structure that allows to store and retrieve elements in a last-in-first-out (LIFO) fashion."}], "algo.data.fenwick.immutable" : [{"name" : "algo.data.fenwick.immutable.FenwickTree", "shortDescription" : "", "object" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.immutable.FenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.immutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.immutable.FenwickTree.factory", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.immutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/package$$FenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "algo.data.fenwick.immutable.GroupFenwickTree", "object" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.immutable.GroupFenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.immutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.immutable.GroupFenwickTree.factory", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.immutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updated", "tail" : "(index: K, value: V): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.updated", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#updated(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.apply", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#apply(index:K):V", "kind" : "abstract def"}, {"label" : "foldRange", "tail" : "(from: K, until: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.foldRange", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#foldRange(from:K,until:K):V", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): CommutativeGroup[V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.group", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#group:cats.kernel.CommutativeGroup[V]", "kind" : "implicit abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.immutable.GroupFenwickTreeOps", "trait" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updated", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.GroupFenwickTreeOps.updated", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#updated(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.apply", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#apply(index:K):V", "kind" : "abstract def"}, {"label" : "foldRange", "tail" : "(from: K, until: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.foldRange", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#foldRange(from:K,until:K):V", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): CommutativeGroup[V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.group", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#group:cats.kernel.CommutativeGroup[V]", "kind" : "implicit abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/immutable\/GroupFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.immutable.MonoidFenwickTree", "object" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeMonoid, MonoidFenwickTree]", "member" : "algo.data.fenwick.immutable.MonoidFenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeMonoid,algo.data.fenwick.immutable.MonoidFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeMonoid, MonoidFenwickTree]", "member" : "algo.data.fenwick.immutable.MonoidFenwickTree.factory", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeMonoid,algo.data.fenwick.immutable.MonoidFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): MonoidFenwickTree[K, V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.immutable.MonoidFenwickTreeOps", "trait" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/immutable\/MonoidFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.immutable.SemigroupFenwickTree", "object" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html", "members_object" : [{"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeSemigroup, SemigroupFenwickTree]", "member" : "algo.data.fenwick.immutable.SemigroupFenwickTree.factory", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeSemigroup,algo.data.fenwick.immutable.SemigroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combined", "tail" : "(index: K, value: V): SemigroupFenwickTree[K, V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.immutable.SemigroupFenwickTreeOps", "trait" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/immutable\/SemigroupFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}], "algo.data.fenwick" : [{"name" : "algo.data.fenwick.FenwickTreeFactory", "trait" : "algo\/data\/fenwick\/FenwickTreeFactory.html", "kind" : "trait", "members_trait" : [{"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.from", "link" : "algo\/data\/fenwick\/FenwickTreeFactory.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.FenwickTreeFactoryProxy", "trait" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html", "kind" : "trait", "members_trait" : [{"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: E[V]): Collection[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[E, Collection]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.factory", "link" : "algo\/data\/fenwick\/FenwickTreeFactoryProxy.html#factory:algo.data.fenwick.FenwickTreeFactory[E,Collection]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.FenwickTreeSparseFactory", "trait" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html", "kind" : "trait", "members_trait" : [{"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: E[V]): Collection[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: E[V]): Collection[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: E[V]): Collection[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.from", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "abstract def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: E[V]): Collection[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.from", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactory.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy", "trait" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html", "kind" : "trait", "members_trait" : [{"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: E[V]): Collection[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: E[V]): Collection[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: E[V]): Collection[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: E[V]): Collection[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[E, Collection]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.sparseFactory", "link" : "algo\/data\/fenwick\/FenwickTreeSparseFactoryProxy.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[E,Collection]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.GroupFenwickTree", "object" : "algo\/data\/fenwick\/GroupFenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.GroupFenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.GroupFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.GroupFenwickTree.factory", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.GroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/GroupFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/GroupFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updated", "tail" : "(index: K, value: V): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.updated", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#updated(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.apply", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#apply(index:K):V", "kind" : "abstract def"}, {"label" : "foldRange", "tail" : "(from: K, until: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.foldRange", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#foldRange(from:K,until:K):V", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): CommutativeGroup[V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.group", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#group:cats.kernel.CommutativeGroup[V]", "kind" : "implicit abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/GroupFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.GroupFenwickTreeOps", "trait" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updated", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.GroupFenwickTreeOps.updated", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#updated(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.apply", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#apply(index:K):V", "kind" : "abstract def"}, {"label" : "foldRange", "tail" : "(from: K, until: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.foldRange", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#foldRange(from:K,until:K):V", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): CommutativeGroup[V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.group", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#group:cats.kernel.CommutativeGroup[V]", "kind" : "implicit abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/GroupFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.MonoidFenwickTree", "object" : "algo\/data\/fenwick\/MonoidFenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeMonoid, MonoidFenwickTree]", "member" : "algo.data.fenwick.MonoidFenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeMonoid,algo.data.fenwick.MonoidFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeMonoid, MonoidFenwickTree]", "member" : "algo.data.fenwick.MonoidFenwickTree.factory", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeMonoid,algo.data.fenwick.MonoidFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/MonoidFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/MonoidFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): MonoidFenwickTree[K, V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/MonoidFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.MonoidFenwickTreeOps", "trait" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/MonoidFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.SemigroupFenwickTree", "object" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html", "members_object" : [{"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeSemigroup, SemigroupFenwickTree]", "member" : "algo.data.fenwick.SemigroupFenwickTree.factory", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeSemigroup,algo.data.fenwick.SemigroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/SemigroupFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combined", "tail" : "(index: K, value: V): SemigroupFenwickTree[K, V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/SemigroupFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.SemigroupFenwickTreeOps", "trait" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/SemigroupFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}], "algo" : [], "algo.data.dsu" : [{"name" : "algo.data.dsu.DisjointSetUnionFactory", "trait" : "algo\/data\/dsu\/DisjointSetUnionFactory.html", "kind" : "trait", "members_trait" : [{"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.tabulate", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$7:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.fill", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#fill[V](size:Int)(elem:=>V)(implicitevidence$6:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.concat", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#concat[V](xss:Iterable[V]*)(implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.unfold", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.iterate", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.apply", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#apply[V](xs:V*)(implicitevidence$2:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeSemigroup[V]): Collection[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.from", "link" : "algo\/data\/dsu\/DisjointSetUnionFactory.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "abstract def"}], "shortDescription" : ""}], "algo.data" : [], "algo.data.stack" : [], "algo.syntax" : [{"name" : "algo.syntax.binexp", "shortDescription" : "", "object" : "algo\/syntax\/package$$binexp$.html", "members_object" : [{"label" : "binaryExponentiationMonoidSyntax", "tail" : "(m: Monoid[A]): BinaryExponentiationMonoidOps[A]", "member" : "algo.algebra.BinaryExponentiationSyntax.binaryExponentiationMonoidSyntax", "link" : "algo\/syntax\/package$$binexp$.html#binaryExponentiationMonoidSyntax[A](m:cats.Monoid[A]):algo.algebra.BinaryExponentiationMonoidOps[A]", "kind" : "implicit final def"}, {"label" : "binaryExponentiationSyntax", "tail" : "(a: A)(arg0: BinaryExponentiation[A]): BinaryExponentiationOps[A]", "member" : "algo.algebra.BinaryExponentiationSyntax.binaryExponentiationSyntax", "link" : "algo\/syntax\/package$$binexp$.html#binaryExponentiationSyntax[A](a:A)(implicitevidence$1:algo.algebra.BinaryExponentiation[A]):algo.algebra.BinaryExponentiationOps[A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/syntax\/package$$binexp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/syntax\/package$$binexp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/syntax\/package$$binexp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/syntax\/package$$binexp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/syntax\/package$$binexp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/syntax\/package$$binexp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/syntax\/package$$binexp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/syntax\/package$$binexp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/syntax\/package$$binexp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/syntax\/package$$binexp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/syntax\/package$$binexp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/syntax\/package$$binexp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/syntax\/package$$binexp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/syntax\/package$$binexp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/syntax\/package$$binexp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/syntax\/package$$binexp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/syntax\/package$$binexp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/syntax\/package$$binexp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/syntax\/package$$binexp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "algo.algebra" : [{"name" : "algo.algebra.BinaryExponentiation", "object" : "algo\/algebra\/BinaryExponentiation$.html", "members_object" : [{"label" : "binexpBigIntMonoid", "tail" : ": BinaryExponentiation[BigInt]", "member" : "algo.algebra.BinaryExponentiation.binexpBigIntMonoid", "link" : "algo\/algebra\/BinaryExponentiation$.html#binexpBigIntMonoid:algo.algebra.BinaryExponentiation[BigInt]", "kind" : "implicit val"}, {"label" : "binexpDoubleMonoid", "tail" : ": BinaryExponentiation[Double]", "member" : "algo.algebra.BinaryExponentiation.binexpDoubleMonoid", "link" : "algo\/algebra\/BinaryExponentiation$.html#binexpDoubleMonoid:algo.algebra.BinaryExponentiation[Double]", "kind" : "implicit val"}, {"label" : "binexpFloatMonoid", "tail" : ": BinaryExponentiation[Float]", "member" : "algo.algebra.BinaryExponentiation.binexpFloatMonoid", "link" : "algo\/algebra\/BinaryExponentiation$.html#binexpFloatMonoid:algo.algebra.BinaryExponentiation[Float]", "kind" : "implicit val"}, {"label" : "binexpLongMonoid", "tail" : ": BinaryExponentiation[Long]", "member" : "algo.algebra.BinaryExponentiation.binexpLongMonoid", "link" : "algo\/algebra\/BinaryExponentiation$.html#binexpLongMonoid:algo.algebra.BinaryExponentiation[Long]", "kind" : "implicit val"}, {"label" : "binexpIntMonoid", "tail" : ": BinaryExponentiation[Int]", "member" : "algo.algebra.BinaryExponentiation.binexpIntMonoid", "link" : "algo\/algebra\/BinaryExponentiation$.html#binexpIntMonoid:algo.algebra.BinaryExponentiation[Int]", "kind" : "implicit val"}, {"label" : "fromMonoid", "tail" : "(m: Monoid[A]): BinaryExponentiation[A]", "member" : "algo.algebra.BinaryExponentiation.fromMonoid", "link" : "algo\/algebra\/BinaryExponentiation$.html#fromMonoid[A](implicitm:cats.Monoid[A]):algo.algebra.BinaryExponentiation[A]", "kind" : "def"}, {"label" : "instance", "tail" : "(emptyValue: A, cmb: (A, A) => A): BinaryExponentiation[A]", "member" : "algo.algebra.BinaryExponentiation.instance", "link" : "algo\/algebra\/BinaryExponentiation$.html#instance[A](emptyValue:A,cmb:(A,A)=>A):algo.algebra.BinaryExponentiation[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(binexp: BinaryExponentiation[A]): BinaryExponentiation[A]", "member" : "algo.algebra.BinaryExponentiation.apply", "link" : "algo\/algebra\/BinaryExponentiation$.html#apply[A](implicitbinexp:algo.algebra.BinaryExponentiation[A]):algo.algebra.BinaryExponentiation[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/algebra\/BinaryExponentiation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/algebra\/BinaryExponentiation$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/algebra\/BinaryExponentiation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/algebra\/BinaryExponentiation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/algebra\/BinaryExponentiation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/algebra\/BinaryExponentiation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/algebra\/BinaryExponentiation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/algebra\/BinaryExponentiation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/algebra\/BinaryExponentiation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/algebra\/BinaryExponentiation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/algebra\/BinaryExponentiation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/algebra\/BinaryExponentiation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/algebra\/BinaryExponentiation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/algebra\/BinaryExponentiation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/algebra\/BinaryExponentiation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/algebra\/BinaryExponentiation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/algebra\/BinaryExponentiation.html", "kind" : "trait", "members_trait" : [{"label" : "binexp", "tail" : "(a: A, n: Long): A", "member" : "algo.algebra.BinaryExponentiation.binexp", "link" : "algo\/algebra\/BinaryExponentiation.html#binexp(a:A,n:Long):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/algebra\/BinaryExponentiation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/algebra\/BinaryExponentiation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/algebra\/BinaryExponentiation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/algebra\/BinaryExponentiation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/algebra\/BinaryExponentiation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/algebra\/BinaryExponentiation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/algebra\/BinaryExponentiation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/algebra\/BinaryExponentiation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/algebra\/BinaryExponentiation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/algebra\/BinaryExponentiation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/algebra\/BinaryExponentiation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/algebra\/BinaryExponentiation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/algebra\/BinaryExponentiation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/algebra\/BinaryExponentiation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/algebra\/BinaryExponentiation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/algebra\/BinaryExponentiation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "monoid", "tail" : "(): Monoid[A]", "member" : "algo.algebra.BinaryExponentiation.monoid", "link" : "algo\/algebra\/BinaryExponentiation.html#monoid:cats.Monoid[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "algo.algebra.BinaryExponentiationMonoidOps", "shortDescription" : "", "members_class" : [{"label" : "toBinaryExponentiation", "tail" : "(): BinaryExponentiation[A]", "member" : "algo.algebra.BinaryExponentiationMonoidOps.toBinaryExponentiation", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#toBinaryExponentiation:algo.algebra.BinaryExponentiation[A]", "kind" : "def"}, {"member" : "algo.algebra.BinaryExponentiationMonoidOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algo\/algebra\/BinaryExponentiationMonoidOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "algo\/algebra\/BinaryExponentiationMonoidOps.html", "kind" : "class"}, {"name" : "algo.algebra.BinaryExponentiationOps", "shortDescription" : "", "members_class" : [{"label" : "binexp", "tail" : "(n: Long)(ev: BinaryExponentiation[A]): A", "member" : "algo.algebra.BinaryExponentiationOps.binexp", "link" : "algo\/algebra\/BinaryExponentiationOps.html#binexp(n:Long)(implicitev:algo.algebra.BinaryExponentiation[A]):A", "kind" : "def"}, {"member" : "algo.algebra.BinaryExponentiationOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "algo\/algebra\/BinaryExponentiationOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "algo\/algebra\/BinaryExponentiationOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "algo\/algebra\/BinaryExponentiationOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "algo\/algebra\/BinaryExponentiationOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "algo\/algebra\/BinaryExponentiationOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "algo\/algebra\/BinaryExponentiationOps.html", "kind" : "class"}, {"name" : "algo.algebra.BinaryExponentiationSyntax", "object" : "algo\/algebra\/BinaryExponentiationSyntax$.html", "members_object" : [{"label" : "binaryExponentiationMonoidSyntax", "tail" : "(m: Monoid[A]): BinaryExponentiationMonoidOps[A]", "member" : "algo.algebra.BinaryExponentiationSyntax.binaryExponentiationMonoidSyntax", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#binaryExponentiationMonoidSyntax[A](m:cats.Monoid[A]):algo.algebra.BinaryExponentiationMonoidOps[A]", "kind" : "implicit final def"}, {"label" : "binaryExponentiationSyntax", "tail" : "(a: A)(arg0: BinaryExponentiation[A]): BinaryExponentiationOps[A]", "member" : "algo.algebra.BinaryExponentiationSyntax.binaryExponentiationSyntax", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#binaryExponentiationSyntax[A](a:A)(implicitevidence$1:algo.algebra.BinaryExponentiation[A]):algo.algebra.BinaryExponentiationOps[A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationSyntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/algebra\/BinaryExponentiationSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "binaryExponentiationMonoidSyntax", "tail" : "(m: Monoid[A]): BinaryExponentiationMonoidOps[A]", "member" : "algo.algebra.BinaryExponentiationSyntax.binaryExponentiationMonoidSyntax", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#binaryExponentiationMonoidSyntax[A](m:cats.Monoid[A]):algo.algebra.BinaryExponentiationMonoidOps[A]", "kind" : "implicit final def"}, {"label" : "binaryExponentiationSyntax", "tail" : "(a: A)(arg0: BinaryExponentiation[A]): BinaryExponentiationOps[A]", "member" : "algo.algebra.BinaryExponentiationSyntax.binaryExponentiationSyntax", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#binaryExponentiationSyntax[A](a:A)(implicitevidence$1:algo.algebra.BinaryExponentiation[A]):algo.algebra.BinaryExponentiationOps[A]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/algebra\/BinaryExponentiationSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "algo.data.dsu.immutable" : [{"name" : "algo.data.dsu.immutable.DisjointSetUnion", "object" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html", "members_object" : [{"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.immutable.DisjointSetUnion.from", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:cats.kernel.CommutativeSemigroup[V]):algo.data.dsu.immutable.DisjointSetUnion[V]", "kind" : "def"}, {"label" : "unite", "tail" : "(u: Int, v: Int): State[DisjointSetUnion[V], Unit]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.unite", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#unite[V](u:Int,v:Int):cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],Unit]", "kind" : "def"}, {"label" : "isSame", "tail" : "(u: Int, v: Int): State[DisjointSetUnion[V], Boolean]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.isSame", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#isSame[V](u:Int,v:Int):cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],Boolean]", "kind" : "def"}, {"label" : "find", "tail" : "(v: Int): State[DisjointSetUnion[V], V]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.find", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#find[V](v:Int):cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],V]", "kind" : "def"}, {"label" : "size", "tail" : "(): State[DisjointSetUnion[V], Int]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.size", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#size[V]:cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],Int]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.tabulate", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$7:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.fill", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$6:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.concat", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#concat[V](xss:Iterable[V]*)(implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.unfold", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.iterate", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeSemigroup[V]): DisjointSetUnion[V]", "member" : "algo.data.dsu.DisjointSetUnionFactory.apply", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#apply[V](xs:V*)(implicitevidence$2:cats.kernel.CommutativeSemigroup[V]):Collection[V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "united", "tail" : "(u: Int, v: Int): DisjointSetUnion[V]", "member" : "algo.data.dsu.immutable.DisjointSetUnion.united", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#united(u:Int,v:Int):algo.data.dsu.immutable.DisjointSetUnion[V]", "kind" : "abstract def"}, {"label" : "isSame", "tail" : "(u: Int, v: Int): (Boolean, DisjointSetUnion[V])", "member" : "algo.data.dsu.immutable.DisjointSetUnion.isSame", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#isSame(u:Int,v:Int):(Boolean,algo.data.dsu.immutable.DisjointSetUnion[V])", "kind" : "abstract def"}, {"label" : "find", "tail" : "(v: Int): (V, DisjointSetUnion[V])", "member" : "algo.data.dsu.immutable.DisjointSetUnion.find", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#find(v:Int):(V,algo.data.dsu.immutable.DisjointSetUnion[V])", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "algo.data.dsu.immutable.DisjointSetUnion.size", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnion.html#size:Int", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.dsu.immutable.DisjointSetUnionSyntax", "trait" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "unite", "tail" : "(u: Int, v: Int): State[DisjointSetUnion[V], Unit]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.unite", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#unite[V](u:Int,v:Int):cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],Unit]", "kind" : "def"}, {"label" : "isSame", "tail" : "(u: Int, v: Int): State[DisjointSetUnion[V], Boolean]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.isSame", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#isSame[V](u:Int,v:Int):cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],Boolean]", "kind" : "def"}, {"label" : "find", "tail" : "(v: Int): State[DisjointSetUnion[V], V]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.find", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#find[V](v:Int):cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],V]", "kind" : "def"}, {"label" : "size", "tail" : "(): State[DisjointSetUnion[V], Int]", "member" : "algo.data.dsu.immutable.DisjointSetUnionSyntax.size", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#size[V]:cats.data.State[algo.data.dsu.immutable.DisjointSetUnion[V],Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/dsu\/immutable\/DisjointSetUnionSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "algo.data.fenwick.mutable" : [{"name" : "algo.data.fenwick.mutable.FenwickTree", "shortDescription" : "", "object" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.mutable.FenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.mutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.mutable.FenwickTree.factory", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.mutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/package$$FenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "algo.data.fenwick.mutable.GroupFenwickTree", "object" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.mutable.GroupFenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.mutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeGroup, GroupFenwickTree]", "member" : "algo.data.fenwick.mutable.GroupFenwickTree.factory", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeGroup,algo.data.fenwick.mutable.GroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeGroup[V]): GroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "updated", "tail" : "(index: K, value: V): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.GroupFenwickTreeOps.updated", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#updated(index:K,value:V):Collection", "kind" : "def"}, {"label" : "clone", "tail" : "(): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.clone", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#clone():Collection", "kind" : "def"}, {"label" : "combined", "tail" : "(index: K, value: V): GroupFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(index: K, value: V): GroupFenwickTree.this.type", "member" : "algo.data.fenwick.mutable.GroupFenwickTreeOps.update", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#update(index:K,value:V):GroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(index: K, value: V): GroupFenwickTree.this.type", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combine", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#combine(index:K,value:V):SemigroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.apply", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#apply(index:K):V", "kind" : "abstract def"}, {"label" : "foldRange", "tail" : "(from: K, until: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.foldRange", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#foldRange(from:K,until:K):V", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): CommutativeGroup[V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.group", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#group:cats.kernel.CommutativeGroup[V]", "kind" : "implicit abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.mutable.GroupFenwickTreeOps", "trait" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "updated", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.mutable.GroupFenwickTreeOps.updated", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#updated(index:K,value:V):Collection", "kind" : "def"}, {"label" : "clone", "tail" : "(): Collection", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.clone", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#clone():Collection", "kind" : "def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(index: K, value: V): GroupFenwickTreeOps.this.type", "member" : "algo.data.fenwick.mutable.GroupFenwickTreeOps.update", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#update(index:K,value:V):GroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(index: K, value: V): GroupFenwickTreeOps.this.type", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combine", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#combine(index:K,value:V):SemigroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(index: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.apply", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#apply(index:K):V", "kind" : "abstract def"}, {"label" : "foldRange", "tail" : "(from: K, until: K): V", "member" : "algo.data.fenwick.GroupFenwickTreeOps.foldRange", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#foldRange(from:K,until:K):V", "kind" : "abstract def"}, {"label" : "group", "tail" : "(): CommutativeGroup[V]", "member" : "algo.data.fenwick.GroupFenwickTreeOps.group", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#group:cats.kernel.CommutativeGroup[V]", "kind" : "implicit abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/mutable\/GroupFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.mutable.MonoidFenwickTree", "object" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html", "members_object" : [{"label" : "sparseFactory", "tail" : "(): FenwickTreeSparseFactory[CommutativeMonoid, MonoidFenwickTree]", "member" : "algo.data.fenwick.mutable.MonoidFenwickTree.sparseFactory", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#sparseFactory:algo.data.fenwick.FenwickTreeSparseFactory[cats.kernel.CommutativeMonoid,algo.data.fenwick.mutable.MonoidFenwickTree]", "kind" : "def"}, {"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeMonoid, MonoidFenwickTree]", "member" : "algo.data.fenwick.mutable.MonoidFenwickTree.factory", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeMonoid,algo.data.fenwick.mutable.MonoidFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(size1: Long, size2: Long, iterable: IterableOnce[((Long, Long), V)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#from[V](size1:Long,size2:Long,iterable:IterableOnce[((Long,Long),V)])(implicitevidence$2:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "from", "tail" : "(size: Long, iterable: IterableOnce[(Long, V)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#from[V](size:Long,iterable:IterableOnce[(Long,V)])(implicitevidence$1:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size1: Long, size2: Long, xs: ((Long, Long), V)*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[(Long, Long), V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#apply[V](size1:Long,size2:Long,xs:((Long,Long),V)*)(implicitevidence$4:E[V]):Collection[(Long,Long),V]", "kind" : "def"}, {"label" : "apply", "tail" : "(size: Long, xs: (Long, V)*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Long, V]", "member" : "algo.data.fenwick.FenwickTreeSparseFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#apply[V](size:Long,xs:(Long,V)*)(implicitevidence$3:E[V]):Collection[Long,V]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeMonoid[V]): MonoidFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "clone", "tail" : "(): MonoidFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.clone", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#clone():Collection", "kind" : "def"}, {"label" : "combined", "tail" : "(index: K, value: V): MonoidFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(index: K, value: V): MonoidFenwickTree.this.type", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combine", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#combine(index:K,value:V):SemigroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.mutable.MonoidFenwickTreeOps", "trait" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "clone", "tail" : "(): Collection", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.clone", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#clone():Collection", "kind" : "def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(index: K, value: V): MonoidFenwickTreeOps.this.type", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combine", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#combine(index:K,value:V):SemigroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "foldTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldTo", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#foldTo(to:K):V", "kind" : "abstract def"}, {"label" : "foldUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.foldUntil", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#foldUntil(until:K):V", "kind" : "abstract def"}, {"label" : "monoid", "tail" : "(): CommutativeMonoid[V]", "member" : "algo.data.fenwick.MonoidFenwickTreeOps.monoid", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#monoid:cats.kernel.CommutativeMonoid[V]", "kind" : "implicit abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/mutable\/MonoidFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.mutable.SemigroupFenwickTree", "object" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html", "members_object" : [{"label" : "factory", "tail" : "(): FenwickTreeFactory[CommutativeSemigroup, SemigroupFenwickTree]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTree.factory", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#factory:algo.data.fenwick.FenwickTreeFactory[cats.kernel.CommutativeSemigroup,algo.data.fenwick.mutable.SemigroupFenwickTree]", "kind" : "def"}, {"label" : "from", "tail" : "(iterable: IterableOnce[V])(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactoryProxy.from", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#from[V](iterable:IterableOnce[V])(implicitevidence$1:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(size: Int)(f: (Int) => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.tabulate", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#tabulate[V](size:Int)(f:Int=>V)(implicitevidence$11:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "fill", "tail" : "(size: Int)(elem: => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.fill", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#fill[V](size:Int)(elem:=>V)(implicitevidence$10:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "concat", "tail" : "(xss: Iterable[V]*)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.concat", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#concat[V](xss:Iterable[V]*)(implicitevidence$9:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V, step: V)(arg0: Integral[V], arg1: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#range[V](start:V,end:V,step:V)(implicitevidence$7:Integral[V],implicitevidence$8:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "range", "tail" : "(start: V, end: V)(arg0: Integral[V], arg1: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.range", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#range[V](start:V,end:V)(implicitevidence$5:Integral[V],implicitevidence$6:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(V, S)])(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.unfold", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#unfold[V,S](init:S)(f:S=>Option[(V,S)])(implicitevidence$4:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: V, len: Int)(f: (V) => V)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.iterate", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#iterate[V](start:V,len:Int)(f:V=>V)(implicitevidence$3:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(xs: V*)(arg0: CommutativeSemigroup[V]): SemigroupFenwickTree[Int, V]", "member" : "algo.data.fenwick.FenwickTreeFactory.apply", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#apply[V](xs:V*)(implicitevidence$2:E[V]):Collection[Int,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html", "kind" : "trait", "members_trait" : [{"label" : "clone", "tail" : "(): SemigroupFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.clone", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#clone():Collection", "kind" : "def"}, {"label" : "combined", "tail" : "(index: K, value: V): SemigroupFenwickTree[K, V]", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#combined(index:K,value:V):Collection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(index: K, value: V): SemigroupFenwickTree.this.type", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combine", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#combine(index:K,value:V):SemigroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTree.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps", "trait" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html", "kind" : "trait", "members_trait" : [{"label" : "clone", "tail" : "(): Collection", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.clone", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#clone():Collection", "kind" : "def"}, {"label" : "combined", "tail" : "(index: K, value: V): Collection", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combined", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#combined(index:K,value:V):Collection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(index: K, value: V): SemigroupFenwickTreeOps.this.type", "member" : "algo.data.fenwick.mutable.SemigroupFenwickTreeOps.combine", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#combine(index:K,value:V):SemigroupFenwickTreeOps.this.type", "kind" : "abstract def"}, {"label" : "reduceTo", "tail" : "(to: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceTo", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#reduceTo(to:K):V", "kind" : "abstract def"}, {"label" : "reduceUntil", "tail" : "(until: K): V", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.reduceUntil", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#reduceUntil(until:K):V", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.size", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#size:K", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): K", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.zero", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#zero:K", "kind" : "abstract def"}, {"label" : "semigroup", "tail" : "(): CommutativeSemigroup[V]", "member" : "algo.data.fenwick.SemigroupFenwickTreeOps.semigroup", "link" : "algo\/data\/fenwick\/mutable\/SemigroupFenwickTreeOps.html#semigroup:cats.kernel.CommutativeSemigroup[V]", "kind" : "implicit abstract def"}], "shortDescription" : ""}]};